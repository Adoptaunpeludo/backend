generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_roles {
  adopter
  shelter
  admin
}

enum genter_enum {
  male
  female
}

enum adoption_publish_status {
  pending
  rejected
  published
}

enum social_media_enum {
  facebook
  xtweet
  instagram
}

enum animal_size {
  small
  medium
  big
  very_big
}

enum legal_forms {
  association
  public_utility_association
  autonomous_foundation
  national_foundation
  other
}

enum facilities {
  foster_homes
  municipal_or_public_facilities
  leased_facilities
  owned_facilities
  private_residences
}

enum status_pet {
  adopted
  fostered
  reserved
  awaiting_home
}

enum molting {
  light
  moderate
  heavy
  no_shedding
}

enum energy {
  light
  moderate
  heavy
}

enum potential {
  none
  low
  moderate
  high
  excessive
}

//* TODO ONDELETE CASCADE
model User {
  id                String     @id @default(uuid())
  email             String     @unique
  password          String
  username          String
  firstName         String
  lastName          String
  dni               String     @unique
  emailValidated    Boolean    @default(false)
  verificationToken String     @default("")
  passwordToken     String     @default("")
  role              user_roles
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @default(now())
  verifiedAt        DateTime?
  avatar            String     @default("avatar.png")
  isOnline          Boolean    @default(false)

  shelter     Shelter?
  admin       Admin?
  animals     Animal[]
  contactInfo ContactInfo?
  Token       Token?
  userFav     UserFav[]
}

model UserFav {
  id       String  @id @default(uuid())
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
  Animal   Animal? @relation(fields: [animalId], references: [id])
  animalId String?
}

model Token {
  id           String  @id @default(uuid())
  refreshToken String
  ip           String
  userAgent    String
  isValid      Boolean @default(true)
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Shelter {
  id                   String       @id
  description          String       @default("")
  cif                  String       @unique
  legalForms           legal_forms?
  veterinaryFacilities Boolean?
  facilities           facilities?
  ownVet               Boolean?
  images               String[]

  user        User          @relation(fields: [id], references: [id], onDelete: Cascade)
  socialMedia SocialMedia[]
  animals     Animal[]
}

model Admin {
  id   String @id
  name String
  user User   @relation(fields: [id], references: [id])
}

model ContactInfo {
  id          String @id
  phoneNumber String
  address     String
  cityId      Int
  user        User   @relation(fields: [id], references: [id], onDelete: Cascade)
  city        City   @relation(fields: [cityId], references: [id])
}

model SocialMedia {
  name      social_media_enum
  url       String
  shelterId String
  shelter   Shelter           @relation(fields: [shelterId], references: [id], onDelete: Cascade)

  @@id([shelterId, name])
}

model City {
  id          Int           @id @default(autoincrement())
  name        String
  contactInfo ContactInfo[]
  animal      Animal[]
}

model Animal {
  id            String                  @id @default(uuid())
  gender        genter_enum
  name          String
  slug          String                  @unique
  age           Float
  description   String                  @default("")
  birthdate     DateTime
  breed         String
  size          animal_size
  publishStatus adoption_publish_status @default(pending)
  status        status_pet              @default(awaiting_home)
  easyTrain     Boolean
  energyLevel   energy
  moltingAmount molting
  images        String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  adoptedBy String
  createdBy String
  cityId    Int

  adopter User?     @relation(fields: [adoptedBy], references: [id])
  shelter Shelter   @relation(fields: [createdBy], references: [id])
  city    City      @relation(fields: [cityId], references: [id])
  userFav UserFav[]
  dog     Dog?
  Cat     Cat?

  @@index([gender])
  @@index([name])
  @@index([age])
  @@index([birthdate])
  @@index([size])
  @@index([createdBy])
}

model Dog {
  id                String    @id
  departmentAdapted Boolean
  droolingPotential potential
  bark              potential
  animal            Animal    @relation(fields: [id], references: [id])
}

model Cat {
  id               String    @id
  playLevel        potential
  kidsFriendly     Boolean
  toilletTrained   Boolean
  scratchPotential potential
  animal           Animal    @relation(fields: [id], references: [id])
}
