generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  password          String
  username          String         @unique
  emailValidated    Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now())
  avatar            String[]       @default([])
  role              user_roles
  verificationToken String         @default("")
  passwordToken     String         @default("")
  dni               String?
  firstName         String?
  isOnline          Boolean        @default(false)
  lastName          String?
  verifiedAt        DateTime?
  admin             Admin?
  animals           Animal[]       @relation("adopted")
  contactInfo       ContactInfo?
  notifications     Notification[]
  shelter           Shelter?
  Token             Token?
  userFav           Animal[]       @relation("userFav")
}

model Notification {
  id        String    @id @default(uuid())
  userId    String
  message   String
  createdAt DateTime  @default(now())
  queue     String
  isRead    Boolean   @default(false)
  isReadAt  DateTime?
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Token {
  id           String  @id @default(uuid())
  refreshToken String
  ip           String
  userAgent    String
  isValid      Boolean @default(true)
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Shelter {
  id                   String        @id
  description          String?       @default("")
  cif                  String?       @default("")
  facilities           String[]
  images               String[]
  legalForms           legal_forms?
  ownVet               Boolean?
  veterinaryFacilities Boolean?
  animals              Animal[]
  user                 User          @relation(fields: [id], references: [id], onDelete: Cascade)
  socialMedia          SocialMedia[]
}

model Admin {
  id   String @id
  name String
  user User   @relation(fields: [id], references: [id])
}

model ContactInfo {
  id          String  @id
  phoneNumber String? @default("")
  cityId      Int
  city        City    @relation(fields: [cityId], references: [id])
  user        User    @relation(fields: [id], references: [id], onDelete: Cascade)
}

model SocialMedia {
  name      social_media_enum
  url       String
  shelterId String
  shelter   Shelter           @relation(fields: [shelterId], references: [id], onDelete: Cascade)

  @@id([shelterId, name])
}

model City {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  animal      Animal[]
  contactInfo ContactInfo[]
}

model Animal {
  id            String                  @id @default(uuid())
  name          String
  slug          String                  @unique
  age           Float
  description   String                  @default("")
  breed         String
  size          animal_size
  publishStatus adoption_publish_status @default(pending)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @default(now())
  adoptedBy     String?
  createdBy     String
  cityId        Int
  images        String[]
  easyTrain     Boolean
  energyLevel   energy
  moltingAmount molting
  status        status_pet              @default(awaiting_home)
  type          animal_type
  gender        gender_enum
  numFavs       Int                     @default(0)
  adopter       User?                   @relation("adopted", fields: [adoptedBy], references: [id])
  city          City                    @relation(fields: [cityId], references: [id])
  shelter       Shelter                 @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  cat           Cat?
  dog           Dog?
  userFav       User[]                  @relation("userFav")

  @@index([gender])
  @@index([name])
  @@index([age])
  @@index([size])
  @@index([createdBy])
}

model Dog {
  id                String    @id
  departmentAdapted Boolean
  droolingPotential potential
  bark              potential
  animal            Animal    @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Cat {
  id               String    @id
  playLevel        potential
  kidsFriendly     Boolean
  scratchPotential potential
  toiletTrained    Boolean
  animal           Animal    @relation(fields: [id], references: [id], onDelete: Cascade)
}

enum user_roles {
  adopter
  shelter
  admin
}

enum gender_enum {
  male
  female
}

enum adoption_publish_status {
  pending
  rejected
  published
}

enum social_media_enum {
  facebook
  xtweet
  instagram
}

enum animal_size {
  small
  medium
  big
  very_big
}

enum legal_forms {
  association
  public_utility_association
  autonomous_foundation
  national_foundation
  other
}

enum facilities {
  foster_homes
  municipal_or_public_facilities
  leased_facilities
  owned_facilities
  private_residences
}

enum status_pet {
  adopted
  fostered
  reserved
  awaiting_home
}

enum molting {
  light
  moderate
  heavy
  no_shedding
}

enum energy {
  light
  moderate
  high
}

enum potential {
  none
  low
  moderate
  high
  excessive
}

enum animal_type {
  cat
  dog
}
