generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_roles {
  adopter
  shelter
  admin
}

enum genter_enum {
  male
  female
}

enum adoption_publish_status {
  pending
  rejected
  published
}

enum social_media_enum {
  facebook
  xtweet
  instagram
}

enum animal_size {
  small
  medium
  big
  very_big
}

//* TODO ONDELETE CASCADE
model User {
  id                String       @id @default(uuid())
  email             String       @unique
  password          String
  username          String
  emailValidated    Boolean      @default(false)
  verificationToken String       @default("")
  passwordToken     String       @default("")
  verified          DateTime?
  role              user_roles
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now())
  avatar            String       @default("avatar.png")
  adopter           Adopter?
  shelter           Shelter?
  admin             Admin?
  contactInfo       ContactInfo?
  Token             Token?
}

model Token {
  id           String  @id @default(uuid())
  refreshToken String
  ip           String
  userAgent    String
  isValid      Boolean @default(true)
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Adopter {
  id        String   @id
  firstName String
  lastName  String   @default("")
  user      User     @relation(fields: [id], references: [id])
  animal    Animal[]
}

model Shelter {
  id          String        @id
  name        String
  description String        @default("")
  user        User          @relation(fields: [id], references: [id])
  socialMedia SocialMedia[]
  animals     Animal[]
}

model Admin {
  id   String @id
  name String
  user User   @relation(fields: [id], references: [id])
}

model ContactInfo {
  id          String  @id
  phoneNumber String?
  address     String?
  cityId      Int
  user        User?   @relation(fields: [id], references: [id])
  city        City    @relation(fields: [cityId], references: [id])
}

model SocialMedia {
  id        Int               @id @default(autoincrement())
  name      social_media_enum
  url       String
  shelterId String
  shelter   Shelter?          @relation(fields: [shelterId], references: [id])
}

model City {
  id          Int           @id @default(autoincrement())
  name        String
  contactInfo ContactInfo[]
  animal      Animal[]
}

model Animal {
  id            String                  @id @default(uuid())
  gender        genter_enum
  name          String
  slug          String                  @unique
  age           Float
  description   String                  @default("")
  birthdate     DateTime
  breed         String
  size          animal_size
  publishStatus adoption_publish_status @default(pending)
  adopted       Boolean                 @default(false)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @default(now())

  adoptedBy String
  createdBy String
  cityId    Int

  adopter Adopter? @relation(fields: [adoptedBy], references: [id])
  shelter Shelter  @relation(fields: [createdBy], references: [id])
  city    City     @relation(fields: [cityId], references: [id])
  images  String[]

  @@index([gender])
  @@index([name])
  @@index([age])
  @@index([birthdate])
  @@index([size])
  @@index([createdBy])
}
